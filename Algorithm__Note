< 시간 복잡도 >
-> 프로그램이 돌아가는 데 걸리는 시간
-> Big-O 표기법
f(n) = 2n² + 100n + 11 번의 기본 연산이 이루어지면
f(n)에 가장 큰 영향을 미치는 문자는 2n²이므로 앞의 계수는 버리고 O(n²)으로 나타냄
Big-O 표기법은 정확한 시간이 아닌 대략적인 시간을 표시

1. O(1) -> 수행 시간이 입력의 크기에 영향을 받지 않음 -> 상수 시간
2. O(log n) -> 단계마다 입력의 크기를 반으로 줄여 나감 ->  로그 시간 -> ex) 이분탐색
3. O(n) -> 입력의 크기만큼 수행 -> 선형 시간
4. O(n log n) -> O(n) * O(log n) or O(log n) * O(n) -> (n || log n)번을 탐색하면서 각각의 탐색에서 (log n || n)번의 처리를 해주는 경우
5. O(n^k) -> 보통 for문의 중첩인 k인 경우

--> 실제 문제에서는 1초에 1억 번 연산을 할 수 있다고 생각하면 됨

< 1. 그리디 알고리즘 >
-> 현재 상황에서 당장 좋아 보이는 것만을 선택하는 알고리즘
-> 매 순간에서의 최선의 선택 = 문제의 최적해
